{"/home/travis/build/npmtest/node-npmtest-chromedriver/test.js":"/* istanbul instrument in package npmtest_chromedriver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromedriver/lib.npmtest_chromedriver.js":"/* istanbul instrument in package npmtest_chromedriver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chromedriver = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chromedriver = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chromedriver/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chromedriver && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chromedriver */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chromedriver\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chromedriver.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chromedriver.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chromedriver.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chromedriver.__dirname + '/lib.npmtest_chromedriver.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chromedriver/node_modules/chromedriver/lib/chromedriver.js":"var path = require('path');\nprocess.env.PATH += path.delimiter + path.join(__dirname, 'chromedriver');\nexports.path = process.platform === 'win32' ? path.join(__dirname, 'chromedriver', 'chromedriver.exe') : path.join(__dirname, 'chromedriver', 'chromedriver');\nexports.version = '2.29';\nexports.start = function(args) {\n  exports.defaultInstance = require('child_process').execFile(exports.path, args);\n  return exports.defaultInstance;\n};\nexports.stop = function () {\n  if (exports.defaultInstance != null){\n    exports.defaultInstance.kill();\n  }\n};","/home/travis/build/npmtest/node-npmtest-chromedriver/node_modules/chromedriver/install.js":"'use strict';\n\nvar AdmZip = require('adm-zip');\nvar fs = require('fs');\nvar helper = require('./lib/chromedriver');\nvar http = require('http');\nvar https = require('https');\nvar kew = require('kew');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar rimraf = require('rimraf').sync;\nvar url = require('url');\nvar util = require('util');\n\nvar libPath = path.join(__dirname, 'lib', 'chromedriver');\nvar cdnUrl = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';\nvar configuredfilePath = process.env.npm_config_chromedriver_filepath || process.env.CHROMEDRIVER_FILEPATH;\n\n// adapt http://chromedriver.storage.googleapis.com/\ncdnUrl = cdnUrl.replace(/\\/+$/, '');\nvar downloadUrl = cdnUrl + '/%s/chromedriver_%s.zip';\nvar platform = process.platform;\n\nvar chromedriver_version = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || helper.version;\nif (platform === 'linux') {\n  if (process.arch === 'x64') {\n    platform += '64';\n  } else {\n    platform += '32';\n  }\n} else if (platform === 'darwin') {\n  if (process.arch === 'x64') {\n    platform = 'mac64';\n  } else {\n    console.log('Only Mac 64 bits supported.');\n    process.exit(1);\n  }\n} else if (platform === 'freebsd') {\n  if (process.arch === 'x64') {\n    platform = 'mac64';\n  } else {\n    platform = 'mac32';\n  }\n} else if (platform !== 'win32') {\n  console.log('Unexpected platform or architecture:', process.platform, process.arch);\n  process.exit(1);\n}\n\nvar tmpPath = findSuitableTempDirectory();\nvar downloadedFile = '';\nvar promise = kew.resolve(true);\n\npromise = promise.then(function () {\n  if (chromedriver_version === 'LATEST')\n    return getLatestVersion(getRequestOptions(cdnUrl + '/LATEST_RELEASE'));\n});\n\n// Start the install.\npromise = promise.then(function () {\n  if (configuredfilePath) {\n    console.log('Using file: ', configuredfilePath);\n    downloadedFile = configuredfilePath;\n  } else {\n    downloadUrl = util.format(downloadUrl, chromedriver_version, platform);\n    var fileName = downloadUrl.split('/').pop();\n    downloadedFile = path.join(tmpPath, fileName);\n    console.log('Downloading', downloadUrl);\n    console.log('Saving to', downloadedFile);\n    return requestBinary(getRequestOptions(downloadUrl), downloadedFile);\n  }\n});\n\npromise.then(function () {\n  return extractDownload(downloadedFile, tmpPath);\n})\n  .then(function () {\n    return copyIntoPlace(tmpPath, libPath);\n  })\n  .then(function () {\n    return fixFilePermissions();\n  })\n  .then(function () {\n    console.log('Done. ChromeDriver binary available at', helper.path);\n  })\n  .fail(function (err) {\n    console.error('ChromeDriver installation failed', err);\n    process.exit(1);\n  });\n\n\nfunction findSuitableTempDirectory() {\n  var now = Date.now();\n  var candidateTmpDirs = [\n    process.env.TMPDIR || process.env.TMP || process.env.npm_config_tmp,\n    '/tmp',\n    path.join(process.cwd(), 'tmp')\n  ];\n\n  for (var i = 0; i < candidateTmpDirs.length; i++) {\n    if (!candidateTmpDirs[i]) continue;\n    var candidatePath = path.join(candidateTmpDirs[i], 'chromedriver');\n    try {\n      mkdirp.sync(candidatePath, '0777');\n      var testFile = path.join(candidatePath, now + '.tmp');\n      fs.writeFileSync(testFile, 'test');\n      fs.unlinkSync(testFile);\n      return candidatePath;\n    } catch (e) {\n      console.log(candidatePath, 'is not writable:', e.message);\n    }\n  }\n\n  console.error('Can not find a writable tmp directory, please report issue on https://github.com/giggio/chromedriver/issues/ with as much information as possible.');\n  process.exit(1);\n}\n\n\nfunction getRequestOptions(downloadPath) {\n  var options = url.parse(downloadUrl);\n  var proxyUrl = options.protocol === 'https:'\n    ? process.env.npm_config_https_proxy\n    : (process.env.npm_config_proxy || process.env.npm_config_http_proxy);\n  if (proxyUrl) {\n    options = url.parse(proxyUrl);\n    options.path = downloadPath;\n    options.headers = { Host: url.parse(downloadPath).host };\n    // Turn basic authorization into proxy-authorization.\n    if (options.auth) {\n      options.headers['Proxy-Authorization'] = 'Basic ' + new Buffer(options.auth).toString('base64');\n      delete options.auth;\n    }\n  } else {\n    options = url.parse(downloadPath);\n  }\n\n  options.rejectUnauthorized = !!process.env.npm_config_strict_ssl;\n\n  // Use certificate authority settings from npm\n  var ca = process.env.npm_config_ca;\n  if (!ca && process.env.npm_config_cafile) {\n    try {\n      ca = fs.readFileSync(process.env.npm_config_cafile, { encoding: 'utf8' })\n        .split(/\\n(?=-----BEGIN CERTIFICATE-----)/g);\n\n      // Comments at the beginning of the file result in the first\n      // item not containing a certificate - in this case the\n      // download will fail\n      if (ca.length > 0 && !/-----BEGIN CERTIFICATE-----/.test(ca[0])) {\n        ca.shift();\n      }\n\n    } catch (e) {\n      console.error('Could not read cafile', process.env.npm_config_cafile, e);\n    }\n  }\n\n  if (ca) {\n    console.log('Using npmconf ca');\n    options.agentOptions = {\n      ca: ca\n    };\n    options.ca = ca;\n  }\n\n  return options;\n}\n\nfunction getLatestVersion(requestOptions) {\n  var deferred = kew.defer();\n  var client = get(requestOptions, function (response) {\n    var body = '';\n    if (response.statusCode === 200) {\n      response.addListener('data', function (data) {\n        body += data;\n      });\n      response.addListener('end', function () {\n        try {\n          chromedriver_version = JSON.parse(body);\n        } catch (err) {\n          deferred.reject('Unable to parse response as JSON', err);\n        }\n        deferred.resolve(true);\n      });\n    } else {\n      client.abort();\n      deferred.reject('Error with ' + requestOptions.protocol + ' request: ' + util.inspect(response.headers));\n    }\n  });\n  return deferred.promise;\n}\n\nfunction requestBinary(requestOptions, filePath) {\n  var deferred = kew.defer();\n\n  var count = 0;\n  var notifiedCount = 0;\n  var outFile = fs.openSync(filePath, 'w');\n\n  var client = get(requestOptions, function (response) {\n    var status = response.statusCode;\n    console.log('Receiving...');\n\n    if (status === 200) {\n      response.addListener('data', function (data) {\n        fs.writeSync(outFile, data, 0, data.length, null);\n        count += data.length;\n        if ((count - notifiedCount) > 800000) {\n          console.log('Received ' + Math.floor(count / 1024) + 'K...');\n          notifiedCount = count;\n        }\n      });\n\n      response.addListener('end', function () {\n        console.log('Received ' + Math.floor(count / 1024) + 'K total.');\n        fs.closeSync(outFile);\n        deferred.resolve(true);\n      });\n\n    } else {\n      client.abort();\n      deferred.reject('Error with http request: ' + util.inspect(response.headers));\n    }\n  });\n\n  return deferred.promise;\n}\n\n\nfunction get(requestOptions, callback, redirects) {\n  redirects = redirects || 0;\n  var protocol = requestOptions.protocol === 'https:' ? https : http;\n  var client = protocol.get(requestOptions, function (response) {\n    var status = response.statusCode;\n    if ((status === 302 || status === 301 || status === 307) && redirects < 5) {\n      console.log('Redirect to %s', response.headers.location);\n      redirects++;\n      return get(getRequestOptions(response.headers.location), callback, redirects);\n    }\n    callback(response);\n  });\n  return client;\n}\n\n\nfunction extractDownload(filePath, tmpPath) {\n  var deferred = kew.defer();\n\n  console.log('Extracting zip contents');\n  try {\n    var zip = new AdmZip(filePath);\n    zip.extractAllTo(tmpPath, true);\n    deferred.resolve(true);\n  } catch (err) {\n    deferred.reject('Error extracting archive ' + err.stack);\n  }\n  return deferred.promise;\n}\n\n\nfunction copyIntoPlace(tmpPath, targetPath) {\n  rimraf(targetPath);\n  console.log(\"Copying to target path\", targetPath);\n  fs.mkdirSync(targetPath);\n\n  // Look for the extracted directory, so we can rename it.\n  var files = fs.readdirSync(tmpPath);\n  var promises = files.map(function (name) {\n    var deferred = kew.defer();\n\n    var file = path.join(tmpPath, name);\n    var reader = fs.createReadStream(file);\n\n    var targetFile = path.join(targetPath, name);\n    var writer = fs.createWriteStream(targetFile);\n    writer.on(\"close\", function () {\n      deferred.resolve(true);\n    });\n\n    reader.pipe(writer);\n    return deferred.promise;\n  });\n\n  return kew.all(promises);\n}\n\n\n\nfunction fixFilePermissions() {\n  // Check that the binary is user-executable and fix it if it isn't (problems with unzip library)\n  if (process.platform != 'win32') {\n    var stat = fs.statSync(helper.path);\n    // 64 == 0100 (no octal literal in strict mode)\n    if (!(stat.mode & 64)) {\n      console.log('Fixing file permissions');\n      fs.chmodSync(helper.path, '755');\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-chromedriver/node_modules/chromedriver/testInstall.js":"#!/usr/bin/env node\n\n\"use strict\";\n\nconst os = require('os');\nconst path = require('path');\nconst fs = require('fs');\nconst spawnSync = require('child_process').spawnSync;\n\nconst versions = ['0.12', '4', '6'];\nconst tmpdir = os.tmpdir();\n\nfunction directoryExists(file) {\n    try {\n        var stat = fs.lstatSync(file);\n        return stat.isDirectory();\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction fileExists(file) {\n    try {\n        var stat = fs.lstatSync(file);\n        return stat.isFile();\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction removeFolder(dir) {\n    if (!fs.existsSync(dir)) return;\n    fs.readdirSync(dir).forEach((file) => {\n        let curPath = dir + path.sep + file;\n        if (fs.lstatSync(curPath).isDirectory())\n            removeFolder(curPath);\n        else\n            fs.unlinkSync(curPath);\n    });\n    fs.rmdirSync(dir);\n}\n\nlet tempInstallPath = path.resolve(tmpdir, 'chromedriver-test');\nif (directoryExists(tempInstallPath)) {\n    console.log(`Deleting directory '${tempInstallPath}'.`);\n    removeFolder(tempInstallPath);\n}\nfs.mkdirSync(tempInstallPath);\n\nfunction checkSpawn(spawnInfo) {\n    if (spawnInfo.stdout) {\n        if (typeof (spawnInfo.stdout) !== 'string')\n            console.log(spawnInfo.stdout.toString('utf8'));\n        else\n            console.log(spawnInfo.stdout);\n    }\n    if (spawnInfo.stderr) {\n        if (typeof (spawnInfo.error) !== 'string')\n            console.error(spawnInfo.stderr.toString('utf8'));\n        else\n            console.error(spawnInfo.stderr);\n    }\n    if (spawnInfo.status !== 0 || spawnInfo.error) {\n        console.error('Failed when spawning.');\n        process.exit(1);\n    }\n    if (typeof (spawnInfo.stdout) !== 'string')\n        return spawnInfo.stdout.toString('utf8');\n    else\n        return spawnInfo.stdout;\n}\n\nfunction nvmUse(version) {\n    if (os.platform() === 'win32')\n        var versionsText = checkSpawn(spawnSync('nvm', ['list']));\n    else\n        var versionsText = checkSpawn(spawnSync('/bin/bash', ['-c', 'source $HOME/.nvm/nvm.sh && nvm list']));\n    const versionsAvailable = versionsText.split('\\n').map(v => v.match(/\\d+\\.\\d+\\.\\d+/)).filter(v => v).map(v => v[0]);\n    var largestMatch = versionsAvailable.filter(v => v.match(`^${version}\\.`)).map(v => v.match(/\\d+\\.(\\d+)\\.\\d+/)).reduce(((max, v) => max[1] > v[1] ? max : v), [null, 0]);\n    if (largestMatch.length === 0) {\n        console.error(`Version '${version}' not found.`);\n        process.exit(3);\n    }\n    var largestMatchingVersion = largestMatch.input;\n    console.log(`Found version '${largestMatchingVersion}'.`);\n    if (os.platform() === 'win32')\n        checkSpawn(spawnSync('nvm', ['use', largestMatchingVersion]));\n    else\n        checkSpawn(spawnSync('/bin/bash', ['-c', `source $HOME/.nvm/nvm.sh && nvm use ${largestMatchingVersion}`]));\n}\n\nfunction sleep(milliseconds) {\n    const inAFewMilliseconds = new Date(new Date().getTime() + 2000);\n    while (inAFewMilliseconds > new Date()) { }\n}\n\nfor (let version of versions) {\n    console.log(`Testing version ${version}...`);\n    let tempInstallPathForVersion = path.resolve(tmpdir, 'chromedriver-test', version);\n    fs.mkdirSync(tempInstallPathForVersion);\n    nvmUse(version);\n    if (os.platform() === 'win32') {\n        sleep(2000); // wait 2 seconds until everything is in place\n        checkSpawn(spawnSync('cmd.exe', ['/c', `npm i ${__dirname}`], { cwd: tempInstallPathForVersion }));\n\n    } else {\n        checkSpawn(spawnSync('npm', ['i', `${__dirname}`], { cwd: tempInstallPathForVersion }));\n    }\n    let executable = path.resolve(tempInstallPathForVersion, 'node_modules', 'chromedriver', 'lib', 'chromedriver', `chromedriver${os.platform() === 'win32' ? '.exe' : ''}`);\n    if (fileExists(executable)) {\n        console.log(`Version ${version} installed fine.`);\n    }\n    else {\n        console.error(`Version ${version} did not install correctly, file '${executable}' was not found.`);\n        process.exit(2);\n    }\n}\n\ntry {\n    removeFolder(tempInstallPath);\n} catch (err) {\n    console.error(`Could not delete folder '${tempInstallPath}'.`);\n}"}